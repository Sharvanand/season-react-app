{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/sharvanand/web-development/Stephen-Grider/season-react/src/index.js\";\nimport { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? 'SUMMER' : 'WINTER';\n  }\n};\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.season = getSeason(props.lat, new Date().getMonth());\n    this.state = {\n      lat: null,\n      errorMessage: ''\n    };\n  }\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(position => this.setState({\n      lat: position.coords.latitude\n    }), err => this.setState({\n      errorMessage: err.message\n    }));\n  }\n\n  render() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Error:\", this.state.errorMessage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 14\n      }, this);\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return /*#__PURE__*/_jsxDEV(SeasonDisplay, {\n        lat: this.state.lat\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"LOADING !!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 37,\n  columnNumber: 17\n}, this), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/sharvanand/web-development/Stephen-Grider/season-react/src/index.js"],"names":["render","React","Component","ReactDOM","SeasonDisplay","getSeason","lat","month","App","season","props","Date","getMonth","state","errorMessage","componentDidMount","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","document","querySelector"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;;AAGA,MAAMC,SAAS,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAe;AAC7B,MAAGA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAxB,EAA0B;AACtB,WAAOD,GAAG,GAAG,CAAN,GAAU,QAAV,GAAqB,QAA5B;AACH;AAEJ,CALD;;AAMA,MAAME,GAAN,SAAkBN,SAAlB,CAA2B;AAAA;AAAA;AAAA,SAEtBO,MAFsB,GAEbJ,SAAS,CAACK,KAAK,CAACJ,GAAP,EAAY,IAAIK,IAAJ,GAAWC,QAAX,EAAZ,CAFI;AAAA,SAIvBC,KAJuB,GAIf;AAAEP,MAAAA,GAAG,EAAC,IAAN;AAAYQ,MAAAA,YAAY,EAAC;AAAzB,KAJe;AAAA;;AAKvBC,EAAAA,iBAAiB,GAAE;AACfC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CAAiDC,QAAD,IAAa,KAAKC,QAAL,CAAc;AAACf,MAAAA,GAAG,EAACc,QAAQ,CAACE,MAAT,CAAgBC;AAArB,KAAd,CAA7D,EACCC,GAAD,IAAS,KAAKH,QAAL,CAAc;AAACP,MAAAA,YAAY,EAACU,GAAG,CAACC;AAAlB,KAAd,CADT;AAIH;;AAEAzB,EAAAA,MAAM,GAAE;AACN,QAAG,KAAKa,KAAL,CAAWC,YAAX,IAA2B,CAAC,KAAKD,KAAL,CAAWP,GAA1C,EAA8C;AAC9C,0BAAM;AAAA,6BAAY,KAAKO,KAAL,CAAWC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAAN;AACC;;AACD,QAAG,CAAC,KAAKD,KAAL,CAAWC,YAAZ,IAA4B,KAAKD,KAAL,CAAWP,GAA1C,EAA8C;AAC9C,0BAAM,QAAC,aAAD;AAAe,QAAA,GAAG,EAAE,KAAKO,KAAL,CAAWP;AAA/B;AAAA;AAAA;AAAA;AAAA,cAAN;AACC;;AACD,wBAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAN;AACF;;AApBsB;;AAwB3BH,QAAQ,CAACH,MAAT,eAAgB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAAuB0B,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAvB","sourcesContent":["import { render } from '@testing-library/react';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\n\n\nconst getSeason = (lat, month) =>{\n    if(month > 2 && month < 9){\n        return lat > 0 ? 'SUMMER' : 'WINTER';\n    }\n\n}\nclass App extends Component{\n\n     season = getSeason(props.lat, new Date().getMonth());\n    \n    state = { lat:null, errorMessage:''}\n    componentDidMount(){\n        window.navigator.geolocation.getCurrentPosition((position)=> this.setState({lat:position.coords.latitude}),\n        (err) => this.setState({errorMessage:err.message})\n         );\n\n    }\n   \n     render(){\n       if(this.state.errorMessage && !this.state.lat){\n       return<div>Error:{this.state.errorMessage}</div>\n       }\n       if(!this.state.errorMessage && this.state.lat){\n       return<SeasonDisplay lat={this.state.lat}/>\n       }\n       return<div>LOADING !!!</div>\n    }\n    \n}\n\nReactDOM.render(<App/>,document.querySelector('#root'));"]},"metadata":{},"sourceType":"module"}